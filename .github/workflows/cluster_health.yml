name: CI Pipeline for Kubernetes Validation & Network Checking

on:
  push:
    branches: [redo]
  pull_request:
    branches: [redo]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube
          
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Start Minikube
        run: |
          minikube start --driver=docker --memory=4g --cpus=2

      - name: Set up kubectl to use Minikube
        run: |
          kubectl config use-context minikube

      - name: Install MetalLB
        run: |
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml
          kubectl create namespace metallb-system

      - name: Configure MetalLB IP Address Pool
        run: |
          kubectl apply -f - <<EOF
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: my-ip-pool
            namespace: metallb-system
          spec:
            addresses:
            - 192.168.0.100-192.168.0.200
          EOF

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f production/full2.yaml
          kubectl apply -f production/secret.yaml

      - name: Wait for deployments to become ready
        run: |
          kubectl rollout status deployment/traefik -n losstracker --timeout=120s
          kubectl rollout status deployment/loss-tracker-nginx-client -n losstracker --timeout=120s

      - name: Test Client Ingress connectivity
        run: |
          echo "Port-forwarding client service to localhost:8080"
          kubectl port-forward svc/loss-tracker-nginx-client 8080:80 -n losstracker &
          PF_PID=$!
          sleep 10
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          echo "HTTP status code: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Client connectivity test failed"
            kill $PF_PID
            exit 1
          fi
          kill $PF_PID
          echo "Client connectivity test passed"

      - name: Test API Ingress connectivity (if available)
        run: |
          echo "Checking for load-balancer-server service..."
          SERVICE_EXISTS=$(kubectl get svc load-balancer-server -n losstracker --ignore-not-found)
          if [ -n "$SERVICE_EXISTS" ]; then
            echo "Service found, port-forwarding API service to localhost:5005"
            kubectl port-forward svc/load-balancer-server 5005:5005 -n losstracker &
            PF_API_PID=$!
            sleep 10
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5005/api)
            echo "HTTP status code: $HTTP_CODE"
            if [ "$HTTP_CODE" != "200" ]; then
              echo "API connectivity test failed"
              kill $PF_API_PID
              exit 1
            fi
            kill $PF_API_PID
            echo "API connectivity test passed"
          else
            echo "Service load-balancer-server not found; skipping API connectivity test"
          fi

