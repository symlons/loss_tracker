name: Minikube local testing env setup
# This is reproducing the local kubernetes/minikube dev environment

on:
  push:
    branches: [redo]
  pull_request:
    branches: [redo]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube
          
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Start Minikube
        run: |
          minikube start --driver=docker --memory=4g --cpus=2

      - name: Set up kubectl to use Minikube
        run: |
          kubectl config use-context minikube

      - name: Start Minikube tunnel
        run: |
          nohup minikube tunnel > tunnel.log 2>&1 &
          sleep 10

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f production/traefik-roles.yaml
          kubectl apply -f production/default-service-account.yaml
          kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.9/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
          kubectl create namespace losstracker || true
          kubectl apply -f production/secret.yaml
          kubectl apply -f production/full2.yaml

      - name: Wait for Traefik pod to be ready
        run: |
          echo "Waiting for Traefik pod to be ready..."
          for i in {1..30}; do
            STATUS=$(kubectl get pod -n losstracker -l app.kubernetes.io/name=traefik -o jsonpath='{.items[0].status.phase}')
            if [ "$STATUS" == "Running" ]; then
              echo "Traefik pod is running."
              exit 0
            fi
            echo "Waiting for Traefik pod to be ready... ($i/30)"
            sleep 10
          done
          echo "Traefik pod did not reach Running state in time."
          exit 1

      - name: Check if Traefik is running
        run: |
          kubectl get pods -n losstracker -l app.kubernetes.io/name=traefik
          kubectl logs -n losstracker -l app.kubernetes.io/name=traefik --tail=10


      - name: Test Traefik ingress routing for /api path
        run: |
          echo "Testing Traefik routing for /api path"
          
          # Check if an ingress exists in the 'losstracker' namespace
          INGRESS_EXISTS=$(kubectl get ingress -n losstracker --ignore-not-found -o jsonpath='{.items[0].metadata.name}')
          
          if [ -n "$INGRESS_EXISTS" ]; then
            echo "Ingress found: $INGRESS_EXISTS. Proceeding to check routing for /api"
            
            # Get the Minikube IP
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"
            
            # Connectivity check to port 80
            if command -v nc &>/dev/null; then
              echo "Checking connectivity to $MINIKUBE_IP on port 80..."
              nc -vz $MINIKUBE_IP 80 || echo "Warning: Unable to connect to port 80 on $MINIKUBE_IP"
            else
              echo "netcat (nc) not available; skipping connectivity test."
            fi
            
            # Send HTTP request to /api with the correct Host header
            echo "Sending HTTP request to http://$MINIKUBE_IP/api with Host header 'mlstatstracker.org'"
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: mlstatstracker.org" http://$MINIKUBE_IP/api)
            
            echo "HTTP status code received for /api: $HTTP_CODE"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "ERROR: Traefik routing for /api path failed. Received HTTP code: $HTTP_CODE"
              echo "Possible causes: Ingress misconfiguration, backend service not available, Traefik routing issue, or connectivity problem."
              exit 1
            fi
            echo "Traefik routing for /api path passed successfully with HTTP status 200"
          else
            echo "Ingress not found in namespace 'losstracker'; skipping /api path routing test"
          fi

      - name: Test Traefik ingress routing for /client path
        run: |
          echo "Testing Traefik routing for /client path"
          INGRESS_EXISTS=$(kubectl get ingress -n losstracker --ignore-not-found -o jsonpath='{.items[0].metadata.name}')
          if [ -n "$INGRESS_EXISTS" ]; then
            echo "Ingress found, checking routing for /client"
            MINIKUBE_IP=$(minikube ip)
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$MINIKUBE_IP:8080/client)
            echo "HTTP status code for /client: $HTTP_CODE"
            if [ "$HTTP_CODE" != "200" ]; then
              echo "Traefik routing for /client path failed"
              exit 1
            fi
            echo "Traefik routing for /client path passed"
          else
            echo "Ingress not found; skipping /client path routing test"
          fi

      - name: Test Client Ingress connectivity
        run: |
          echo "Port-forwarding client service to localhost:8080"
          kubectl port-forward svc/loss-tracker-nginx-client 8080:80 -n losstracker &
          PF_PID=$!
          sleep 10
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          echo "HTTP status code: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Client connectivity test failed"
            kill $PF_PID
            exit 1
          fi
          kill $PF_PID
          echo "Client connectivity test passed"

      - name: Test API Ingress connectivity (if available)
        run: |
          echo "Checking for load-balancer-server service..."
          SERVICE_EXISTS=$(kubectl get svc load-balancer-server -n losstracker --ignore-not-found)
          if [ -n "$SERVICE_EXISTS" ]; then
            echo "Service found, port-forwarding API service to localhost:5005"
            kubectl port-forward svc/load-balancer-server 5005:5005 -n losstracker &
            PF_API_PID=$!
            sleep 10
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5005/)
            echo "HTTP status code: $HTTP_CODE"
            if [ "$HTTP_CODE" != "200" ]; then
              echo "API connectivity test failed"
              kill $PF_API_PID
              exit 1
            fi
            kill $PF_API_PID
            echo "API connectivity test passed"
          else
            echo "Service load-balancer-server not found; skipping API connectivity test"
          fi


      - name: Final Traefik status check
        run: |
          kubectl get pods -n losstracker -l app.kubernetes.io/name=traefik
          kubectl logs -n losstracker -l app.kubernetes.io/name=traefik --tail=10

