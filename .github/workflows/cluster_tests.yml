name: CI/CD Pipeline for Kubernetes

on:
  push:
    branches:
      - master

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Set up Kind and kubectl
      run: |
        sudo apt-get update
        
        # Install Kind
        curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/v0.18.0/kind-linux-amd64
        sudo chmod +x kind
        sudo mv kind /usr/local/bin/
        
        # Install kubectl
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.1/bin/linux/amd64/kubectl
        sudo chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Clean up any existing Kind clusters
      run: |
        kind get clusters && kind delete cluster --name kind || echo "No existing Kind cluster found"

    - name: Create a new Kind cluster
      run: |
        kind create cluster
        sleep 5  # Give it time to initialize

    - name: Set up kubectl for the Kind cluster
      run: |
        export KUBEVERSION=$(kind version --client)
        echo "Kube version: $KUBEVERSION"
        kind get kubeconfig > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        kubectl cluster-info  # Verify the cluster is up

    - name: Apply Traefik CRDs
      run: |
        echo "Applying Traefik CRDs..."
        kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.9/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml

    - name: Apply Kubernetes manifests
      run: |
        echo "Applying Kubernetes manifests..."
        kubectl create namespace losstracker
        kubectl apply -f production/full2.yaml --validate=false
        kubectl apply -f production/secret.yaml --validate=false
        kubectl apply -f production/traefik-roles.yaml --validate=false
        kubectl apply -f production/default-service-account.yaml --validate=false

    - name: Wait for deployments to become ready
      run: |
        echo "Waiting for deployments to become ready..."
        if ! kubectl rollout status deployment/traefik -n losstracker --timeout=220s; then
          echo "ERROR: Traefik deployment failed to roll out"
          kubectl get pods -n losstracker
          kubectl describe deployment/traefik -n losstracker
          exit 1
        fi

        if ! kubectl rollout status deployment/loss-tracker-nginx-client -n losstracker --timeout=220s; then
          echo "ERROR: Client deployment failed to roll out"
          kubectl get pods -n losstracker
          kubectl describe deployment/loss-tracker-nginx-client -n losstracker
          exit 1
        fi

    - name: Test Client Ingress connectivity
      run: |
        echo "Port-forwarding client service to localhost:8080"
        kubectl port-forward svc/loss-tracker-nginx-client 8080:80 -n losstracker &
        PF_PID=$!
        sleep 10
        echo "Checking client service response..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
        echo "HTTP status code: $HTTP_CODE"
        if [ "$HTTP_CODE" != "200" ]; then
          echo "Client connectivity test failed"
          kill $PF_PID
          exit 1
        fi
        kill $PF_PID
        echo "Client connectivity test passed"

    - name: Test API Ingress connectivity
      run: |
        echo "Checking for load-balancer-server service..."
        if kubectl get svc load-balancer-server -n losstracker --ignore-not-found | grep -q load-balancer-server; then
          echo "Service found, waiting for pod to be in Running state..."
          kubectl wait --for=condition=ready pod -l app=loss-tracker-server -n losstracker --timeout=120s
          echo "Port-forwarding API service to localhost:5005"
          kubectl port-forward svc/load-balancer-server 5005:5005 -n losstracker &
          PF_API_PID=$!
          sleep 10
          echo "Checking API endpoint response..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5005/)
          echo "HTTP status code: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "API connectivity test failed"
            kill $PF_API_PID
            exit 1
          fi
          kill $PF_API_PID
          echo "API connectivity test passed"
        else
          echo "Service load-balancer-server not found; skipping API connectivity test"
        fi

    - name: Test Traefik routing for /api path
      run: |
        echo "Testing Traefik routing for /api path"
        INGRESS_EXISTS=$(kubectl get ingress -n losstracker --ignore-not-found -o jsonpath='{.items[0].metadata.name}')
        echo "Ingress exists: $INGRESS_EXISTS"
        if [ -n "$INGRESS_EXISTS" ]; then
          echo "Ingress found: $INGRESS_EXISTS. Proceeding to check routing for /api"

          # Port-forward the Traefik service to make it accessible locally
          echo "Port-forwarding Traefik service to localhost:8000"
          kubectl port-forward svc/traefik 8000:80 -n losstracker &
          TRAEFIK_PF_PID=$!
          sleep 5

          # Test the routing for /api with host header
          echo "Testing API endpoint through Traefik..."
          RESPONSE=$(curl -s -D - -o /dev/null -H "Host: mlstatstracker.org" http://localhost:8000/api/)
          HTTP_CODE=$(echo "$RESPONSE" | grep HTTP | awk '{print $2}')
          echo "HTTP status code received for /api: $HTTP_CODE"
          
          # Clean up port-forward
          kill $TRAEFIK_PF_PID
          
          # Check response code
          if [[ "$HTTP_CODE" =~ ^(200|302|307|308)$ ]]; then
            echo "Traefik routing for /api path passed successfully with HTTP status $HTTP_CODE"
          else
            echo "ERROR: Traefik routing for /api path failed. Received HTTP code: $HTTP_CODE"
            # Print diagnostic information
            echo "Checking Traefik logs..."
            kubectl logs -l app.kubernetes.io/name=traefik -n losstracker --tail=50
            echo "Checking ingress configuration..."
            kubectl get ingress -n losstracker -o yaml
            exit 1
          fi
        else
          echo "Ingress not found in namespace 'losstracker'; skipping /api path routing test"
        fi

    - name: All tests completed successfully
      run: |
        echo "All tests completed successfully!"
